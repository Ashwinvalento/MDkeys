/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import utils.Keys;
import utils.LicenseAlgorithm;
import utils.TokenAlgorithm;
import java.io.DataOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 *
 * @author Ash
 */
public class ClientAuthentication {

    String passPhrase = "";
    int responseCode = 0;

    /**
     * This Class provides various methods to be used in the Client side.
     * Argument passPhrase is a symmetric key which is passed once to the class
     * and uses this passPhrase as a password to generate unique token to the
     * client.
     * <p>
     * Note that the same passPhrase has to be used in the Server
     *
     * @param passPhrase a password required to generate unique application
     * dependent keys
     */
    public ClientAuthentication(String passPhrase) {
        this.passPhrase = passPhrase;
    }

    /**
     * The getMachineKeys function returns a combination of three machine
     * Dependent keys. The keys contain a combination of MAC ID , MotherBoard ID
     * and Hard Disk ID
     *
     * @return combination of Hardware Keys
     */
    public final String getMachineKeys() {
        Keys keys = new Keys();
        String MBID = keys.getMotherBoardSerialNumber();
        String MACID = keys.getMacID();
        String HDDID = keys.getHDDSerialNumber();
        return MBID + MACID + HDDID;
    }

    /**
     * The getToken method returns a unique token generated based on the client
     * System and the PassPhrase. This token can be used by the application
     * developer to generate a machine dependent License key.
     * <p>
     * NOTE: the parameter tokenAlgorithm is a object of TokenAlgorithm class
     * which contains the function algorithm that can be overridden to implement
     * custom token generation algorithm. If null is sent as the parameter then
     * the default algorithm will be used.
     *
     * @param tokenAlgorithm Object of a class which extends the TokenAlgorithm
     * class ,null for default Algorithm
     * @return The unique Machine dependent token
     */
    public final String getToken(TokenAlgorithm tokenAlgorithm) {
        String token = null;
        TokenAlgorithm defaultAlgorithm = new TokenAlgorithm();
        if (tokenAlgorithm == null) {
            tokenAlgorithm = defaultAlgorithm;
        }

        String machineKeys = getMachineKeys();
        token = tokenAlgorithm.algorithm(machineKeys + passPhrase).toUpperCase();

        return token;
    }

    /**
     * The validate method validates the License generated at the server side
     * which uses the token generated using getToken() and the passPhrase. This
     * function implements a simple algorithm and can be overridden by another
     * algorithm which matches the server side implementation.
     *
     * NOTE: the parameter licenseAlgorithm is a object of LicenseAlgorithm
     * class which contains the function algorithm that can be overridden to
     * implement custom license validation algorithm. Also if a custom algorithm
     * is used, it should match the algorithm used in the server . If null is
     * sent as the parameter then the default algorithm will be used.
     *
     * @param licenseAlgorithm Object of a class which extends the
     * LicenseAlgorithm class ,null for default Algorithm
     * @param token The token generated by the getToken() method.
     * @param License The License key generated by Server.
     * @return true if the server License key matches the client machine, false
     * otherwise.
     */
    public final boolean validate(LicenseAlgorithm licenseAlgorithm, String token, String License) {

        String validateLicense = "";

        LicenseAlgorithm defaultAlgorithm = new LicenseAlgorithm();
        if (licenseAlgorithm == null) {
            licenseAlgorithm = defaultAlgorithm;
        }

        validateLicense = licenseAlgorithm.algorithm(token + passPhrase).toUpperCase();
        return License.equals(validateLicense);
    }


    /**
     *
     * The getLicenseOnline method uses HTTP POST to send the token generated by
     * the getToken() to the online server or payment gateway whose Url is
     * provided.
     * <p>
     * The HTTP POST method key is "token". I.e In the server use
     * "request.getParameter("token") " to receive the token value
     *
     * The payment Gateway page whose URL is specified as parameter is opened in
     * the default browser.
     *
     * @param token The token for whom the license has to be generated by the
     * server.
     * @param URL The absolute path of the server.
     * @return true if the response is success,false otherwise.
     */
    public final boolean getLicenseOnline(String token, String URL) throws Exception {

        String onlineToken = token;

        System.out.println("online token :" + onlineToken);
        URL obj = new URL(URL);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        //add reuqest header
        con.setRequestMethod("POST");
        con.setRequestProperty("User-Agent", "Mozilla/5.0");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        String urlParameters = "token=" + onlineToken;

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        try {
            String openurl = URL + "?" + urlParameters;
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(openurl));
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }

        responseCode = con.getResponseCode();

        if (responseCode >= 200 && responseCode < 300) {
            return true;
        }
        return false;
    }

    /**
     * The getResponseCode method is used to get the response code sent by the
     * server if getLicenseOnline method is used
     *
     * @return returns the response code <br/>1xx Informational<br/> 2xx Success
     * <br/>3xx Redirection <br/>4xx Client Error<br/> 5xx Server Error
     */
    public final int getResponseCode() {
        return responseCode;
    }

}
